Standard terminology: the value at the top of the stack is x, the value beneath it is y, the one beneath that is z

h3. Stack operations

* *return:* Exit the function and return x
* *push(number):* Push the argument to the top of the stack
* *dup:* Push x to the top of the stack (shallow copy)
* *swap:* Swap x and y

h3. Variable operations

* *load(name):* Look up the variable given by name from params/vars, and push its value
* *store(name):* Store x into the param/var given by name

h3. Arithmetic

* *add:* Pop x and y, push x+y
* *sub:* Pop x and y, push y-x
* *mul:* Pop x and y, push x*y
* *div:* Pop x and y, push y/x
* *mod:* Pop x and y, push y%x
* *dec:* Pop x, push x-1
* *inc:* Pop x, push x+1

h3. Jumps

Jump to the given address if the conditions match. Conditions only work on numeric values

* *jmp(address):* Jump unconditionally
* *jmplt(address):* Pop x and y, jump if x < y
* *jmpgt(address):* Pop x and y, jump if x > y
* *jmple(address):* Pop x and y, jump if x <= y
* *jmpge(address):* Pop x and y, jump if x >= y
* *jmpe(address):* Pop x and y, jump if x == y
* *jmpne(address):* Pop x and y, jump if x != y
* *jmpz(address):* Pop x, jump if x == 0
* *jmpnz(address):* Pop x, jump if x != 0

h3. Array operations

Arrays can hold any number of elements, and the elements don't have to be the same type

* *anew:* Create a new array and push it on to the stack
* *size:* Pop x, push the number of elements in it
* *aget:* Pop x and y, push y[x]
* *aset:* Pop x, y, and z, store x in z[y]
* *apush:* Pop x and y, store x at the end of y

h3. Hash operations

Hashes hold key/value pairs. Any types can be used as keys or values

* *hnew:* Create a new hash and push it on to the stack
* *hget:* Pop x and y, push y[x]
* *hset:* Pop x, y, and z, store x in z[y]
